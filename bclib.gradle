buildscript {
    dependencies {
        classpath 'org.kohsuke:github-api:1.114'
    }

    repositories {
        gradlePluginPortal()
    }
}
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://maven.dblsaiko.net/" }
    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://maven.blamejared.com' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.terraformersmc.com/releases' }
    maven { url 'https://maven.terraformersmc.com' }
}

def local_wunderlib = findProject(':WunderLib') != null
def local_wover = findProject(':WorldWeaver') != null

loom {
    accessWidenerPath = file("src/main/resources/bclib.accesswidener")
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"

            runDir "build/datagen"
        }
    }
    if (local_wover || local_wunderlib) {
        enableTransitiveAccessWideners = true
    }
}


sourceSets {
    main {
        // Add the datagenned files into the jar.
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    //make sure we are compatible to the old model API
//    modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"

//    modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"
//    modLocalRuntime "dev.emi:emi-fabric:${emi_version}"

    println "Using local WunderLib: ${local_wunderlib}"
    if (local_wunderlib) {
        implementation project(path: ":WunderLib", configuration: 'dev')
        include project(path: ":WunderLib", configuration: 'dev')
    } else {
        modApi "com.github.quiqueck:WunderLib:${project.wunderlib_version}"
        include "com.github.quiqueck:WunderLib:${project.wunderlib_version}"
    }

    println "Using local WorldWeaver: ${local_wover}"
    if (local_wover) {
        implementation project(path: ":WorldWeaver", configuration: 'dev')

        gradle.knownWoverModules.each {
            implementation project(path: ":WorldWeaver:$it", configuration: 'dev')
        }
    }
}

processResources {
    println "Version: ${project.mod_version}"
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    it.options.release = 17
}

javadoc {
    options {
        source = "17"
        encoding = "UTF-8"
        charSet = "UTF-8"
        tags = ["reason"]
        memberLevel = JavadocMemberLevel.PROTECTED
        links("https://docs.oracle.com/en/java/javase/17/docs/api/")
        // Disable the crazy super-strict doclint tool in Java 8
        addStringOption("Xdoclint:none", "-quiet")
        addStringOption("noqualifier", "net.minecraft.*:com.mojang.*:net.fabricmc.*")
        addBooleanOption("-allow-script-in-comments", true)
        tags(
                'apiNote:a:API Note:',
                'implSpec:a:Implementation Requirements:',
                'implNote:a:Implementation Note:'
        )
        stylesheetFile = new File(projectDir, "javadoc.css")
    };
}

subprojects { subproject ->
    subproject.tasks.withType(Javadoc) { javadocTask ->
        javadocTask.failOnError false
        javadocTask.enabled = false
    }

    subproject.tasks.withType(Jar) { jarTask ->
        if (jarTask.name == 'javadocJar') {
            jarTask.enabled = false
        }
    }
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
    from "LICENSE.ASSETS"
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def env = System.getenv()

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task release(dependsOn: [remapJar, sourcesJar, javadocJar]) {
    onlyIf {
        env.GITHUB_TOKEN
    }

    doLast {
        def github = GitHub.connectUsingOAuth(env.GITHUB_TOKEN as String)
        def repository = github.getRepository("quiqueck/BCLib")

        def releaseBuilder = new GHReleaseBuilder(repository, version as String)
        releaseBuilder.name("${archivesBaseName}-${version}")
        releaseBuilder.body("A changelog can be found at https://github.com/quiqueck/BCLib/commits")
        releaseBuilder.commitish("main")

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
        ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}-sources.jar"), "application/java-archive");
        ghRelease.uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}-javadoc.jar"), "application/java-archive");
    }
}

// configure the maven publication
publishing {
    publications {
        gpr(MavenPublication) {
            artifactId archivesBaseName
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/quiqueck/bclib")
            credentials {
                username = env.GITHUB_USER
                password = env.GITHUB_TOKEN
            }
        }
    }
}

configurations {
    dev {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    dev jar
}

allprojects {
    // Allow 400 errors.
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "5000"
        }
    }
}
