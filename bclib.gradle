buildscript {
    dependencies {
        classpath 'org.kohsuke:github-api:1.114'
    }

    repositories {
        gradlePluginPortal()
    }
}
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://maven.dblsaiko.net/" }
    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://maven.blamejared.com' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.terraformersmc.com/releases' }
    maven { url 'https://maven.terraformersmc.com' }
    maven { url 'https://maven.ambertation.de/releases' }
}

java {
    withSourcesJar()
}

def local_wunderlib = findProject(':wunderlib') != null
def local_wover = findProject(':WorldWeaver') != null

loom {
    accessWidenerPath = file("src/main/resources/bclib.accesswidener")
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"
            vmArg "-Dfabric-api.datagen.modid=${archivesBaseName}"

            runDir "build/datagen"
        }
    }
    if (local_wover || local_wunderlib) {
        enableTransitiveAccessWideners = true
    }
}


sourceSets {
    main {
        // Add the datagenned files into the jar.
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
    modLocalRuntime "com.terraformersmc:modmenu:${project.modmenu_version}"

    modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"
    modLocalRuntime "dev.emi:emi-fabric:${emi_version}"

    println "Using local WunderLib: ${local_wunderlib}"
    if (local_wunderlib) {
        implementation project(path: ":wunderlib", configuration: 'dev')
    } else if (local_wover) {
        modImplementation "de.ambertation:wunderlib:${project.wunderlib_version}"
    }

    println "Using local WorldWeaver: ${local_wover}"
    if (local_wover) {
        implementation project(path: ":WorldWeaver", configuration: 'dev')

        gradle.knownWoverModules.each {
            implementation project(path: ":WorldWeaver:$it", configuration: 'dev')
        }
    } else {
        modImplementation "org.betterx:worldweaver:${project.wover_version}"
    }
}

processResources {
    println "Version: ${project.mod_version}"
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    it.options.release = 21
}

javadoc {
    options {
        source = "17"
        encoding = "UTF-8"
        charSet = "UTF-8"
        tags = ["reason"]
        memberLevel = JavadocMemberLevel.PROTECTED
        links("https://docs.oracle.com/en/java/javase/17/docs/api/")
        // Disable the crazy super-strict doclint tool in Java 8
        addStringOption("Xdoclint:none", "-quiet")
        addStringOption("noqualifier", "net.minecraft.*:com.mojang.*:net.fabricmc.*")
        addBooleanOption("-allow-script-in-comments", true)
        tags(
                'apiNote:a:API Note:',
                'implSpec:a:Implementation Requirements:',
                'implNote:a:Implementation Note:'
        )
        stylesheetFile = new File(projectDir, "javadoc.css")
    };
}

subprojects { subproject ->
    subproject.tasks.withType(Javadoc) { javadocTask ->
        javadocTask.failOnError false
        javadocTask.enabled = false
    }

    subproject.tasks.withType(Jar) { jarTask ->
        if (jarTask.name == 'javadocJar') {
            jarTask.enabled = false
        }
    }
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
tasks.sourcesJar {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
    from "LICENSE.ASSETS"
}

configurations {
    dev {
        transitive true
        canBeConsumed true
        canBeResolved false
        extendsFrom api
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
    dev jar
}

allprojects {
    // Allow 400 errors.
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "5000"
        }
    }
}
